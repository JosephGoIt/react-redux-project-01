{"version":3,"file":"static/js/998.2a374392.chunk.js","mappings":"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","sources":["components/TransactionsList/Shorter.js","components/TransactionsList/TransactionsItem.module.css","components/TransactionsList/TransactionsItem.jsx","webpack://react-homework-template/./src/components/TransactionsMessage/TransactionsMessage.module.css?ee09","components/TransactionsMessage/TransactionsMessage.jsx","webpack://react-homework-template/./src/components/TransactionsList/TransactionsList.module.css?185a","components/TransactionsList/TransactionsList.jsx","webpack://react-homework-template/./src/components/TransactionsSearchTools/TransactionsSearchTools.module.css?415c","components/TransactionsSearchTools/TransactionsSearchTools.jsx","webpack://react-homework-template/./src/pages/TransactionsHistory.module.css?8db3","pages/TransactionsHistory.jsx"],"sourcesContent":["export const Shorter = (str, windowSize) => {\n    let word = 7;\n    if (windowSize < 1440) {\n      word = 6;\n    }\n  \n    if (str.length > word) {\n      return `${str.slice(0, word)}...`;\n    }\n    return str;\n  };\n  \n  export const ShorterDate = (str, windowSize) => {\n    if (windowSize < 1440) {\n      return `${str.slice(0, 5)}...`;\n    }\n    if (windowSize >= 1440) {\n      return `${str.slice(0, 14)}`;\n    }\n  };","// extracted by mini-css-extract-plugin\nexport default {};","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Shorter, ShorterDate } from './Shorter';\nimport { deleteTransaction, getTransactions} from '../../redux/Transaction/operations';\nimport { Icon } from 'components';\nimport { fetchCurrentUser } from '../../redux/User/operations';\nimport s from './TransactionsItem.module.css';\nimport { selectCurrency } from '../../redux/User/userSlice';\nimport { useParams } from 'react-router-dom';\n\nexport const TransactionsItem = ({ item, handleOpenModal }) => {\n  const [windowSize, setWindowSize] = useState(window.innerWidth);\n  const { transactionsType } = useParams();\n\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(window.innerWidth);\n    }\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  const dispatch = useDispatch();\n\n  const handleDeleteTransaction = id => {\n    dispatch(deleteTransaction(id))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toast.success('Transaction deleted successfully');\n      })\n      .catch(error => toast.error('Something wrong !'));\n  };\n\n  const convertDate = dateString => {\n    const dateObj = new Date(dateString);\n    const days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];\n    const dayOfWeek = days[dateObj.getDay()];\n    const day = dateObj.getDate();\n    const month = dateObj.getMonth() + 1;\n    const year = dateObj.getFullYear();\n    const formattedDate = `${dayOfWeek}, ${\n      day[0] === '0' ? day.substring(1) : day\n    }.${month.toString().padStart(2, '0')}.${year}`;\n    return formattedDate;\n  };\n\n  const currency = useSelector(selectCurrency);\n\n  return (\n    <ul className={s.tr} key={item._id}>\n      <li className={s.td}>\n        {Shorter(item.category.categoryName, windowSize)}\n      </li>\n      <li className={s.td}>{Shorter(item.comment, windowSize)}</li>\n      <li className={s.td}>\n        {ShorterDate(convertDate(item.date), windowSize)}\n      </li>\n      <li className={s.td}>{item.time}</li>\n      <li className={s.td}>\n        {item.sum} / {currency.toUpperCase()}\n      </li>\n      <li className={s.td}>\n        <div className={s.btnContainer}>\n          <button className={s.btnTable} onClick={() => handleOpenModal(item)}>\n            <div className={s.textEdit}>Edit</div>\n            <Icon name=\"edit\" className={s.iconEdit} size=\"16\" />\n          </button>\n          <button\n            className={s.btnTableDel}\n            onClick={() => handleDeleteTransaction(item._id)}\n          >\n            <Icon name=\"trash-bin\" className={s.iconDelete} size=\"16\" />\n\n            <div className={s.textCont}>\n              <span>Delete</span>\n            </div>\n          </button>\n        </div>\n      </li>\n    </ul>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"TransactionsMessage_message__sY73g\"};","import s from './TransactionsMessage.module.css';\n\nexport const TransactionsMessage = ({ message }) => {\n  return <h2 className={s.message}>{message}</h2>;\n};","// extracted by mini-css-extract-plugin\nexport default {\"containerTable\":\"TransactionsList_containerTable__rnVmV\",\"listTable\":\"TransactionsList_listTable__JzalU\",\"thead\":\"TransactionsList_thead__cvmoU\",\"th\":\"TransactionsList_th__pmFFm\",\"td\":\"TransactionsList_td__kiLvp\",\"tr\":\"TransactionsList_tr__8qRgO\",\"tbody\":\"TransactionsList_tbody__7w5DG\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport { TransactionsItem } from './TransactionsItem';\nimport { selectFilter } from '../../redux/Filter/FilterSlice';\nimport { editTransaction, getTransactions } from '../../redux/Transaction/operations';\nimport { selectTransactions } from '../../redux/Transaction/TransactionSlice';\nimport { useModal } from '../../hooks';\nimport { Modal } from '../Modal/Modal';\nimport { TransactionForm } from '../TransactionForm/TransactionForm';\nimport { fetchCurrentUser } from '../../redux/User/operations';\nimport { TransactionsMessage } from '../TransactionsMessage/TransactionsMessage';\nimport s from './TransactionsList.module.css';\n\nexport const TransactionsList = () => {\n  const { transactionsType } = useParams();\n  const dispatch = useDispatch();\n  const transactions = useSelector(selectTransactions);\n\n  const onSubmitForm = transaction => {\n    dispatch(editTransaction(transaction))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toast.success('Transaction edited successfully!');\n        toggleEditTransaction();\n      })\n      .catch(error => {\n        toast.error('Something went wrong!');\n      });\n  };\n\n  const [isOpenEditTransaction, toggleEditTransaction] = useModal();\n\n  const filter = useSelector(selectFilter);\n  const getFilterValue = () => {\n    return transactions.filter(\n      item =>\n        item.category.categoryName\n          .toLowerCase()\n          .includes(filter.toLowerCase()) ||\n        item.comment.toLowerCase().includes(filter.toLowerCase()) ||\n        item.date.includes(filter) ||\n        item.time.includes(filter) ||\n        item.sum.toString().includes(filter)\n    );\n  };\n  const filterItems = getFilterValue();\n\n  const [currentItem, setCurrentItem] = useState({});\n\n  const handleOpenModal = item => {\n    setCurrentItem(item);\n    toggleEditTransaction();\n  };\n\n  return (\n    <div className={`${s.containerTable} scroll scrollB `}>\n      <div className={s.listTable}>\n        <div className={s.thead}>\n          <ul className={s.tr} key=\"111111\">\n            <li className={s.th}>Category</li>\n            <li className={s.th}>Comment</li>\n            <li className={s.th}>Date</li>\n            <li className={s.th}>Time</li>\n            <li className={s.th}>Sum</li>\n            <li className={s.th}>Actions</li>\n          </ul>\n        </div>\n        <div className={`${s.tbody} scroll scrollB`}>\n          {transactions.length === 0 && (\n            <TransactionsMessage\n              message={`Transaction ${transactionsType} list is empty!`}\n            />\n          )}\n          {filterItems.length !== 0 &&\n            filterItems.map(item => (\n              <TransactionsItem\n                key={item._id}\n                item={item}\n                handleOpenModal={handleOpenModal}\n              />\n            ))}\n          {filter && filterItems.length === 0 && transactions.length !== 0 && (\n            <TransactionsMessage message=\"Nothing found by filter!\" />\n          )}\n        </div>\n      </div>\n      {isOpenEditTransaction && (\n        <Modal toggleModal={toggleEditTransaction}>\n          <TransactionForm\n            transaction={currentItem}\n            onSubmitForm={onSubmitForm}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"TransactionsSearchTools_formContainer__L1znS\",\"formBox\":\"TransactionsSearchTools_formBox__6AVYx\",\"formInput\":\"TransactionsSearchTools_formInput__Rh6eq\",\"formCalendar\":\"TransactionsSearchTools_formCalendar__TAbGt\",\"datePicker\":\"TransactionsSearchTools_datePicker__gFkLv\",\"datepickerContainer\":\"TransactionsSearchTools_datepickerContainer__FHBMB\",\"react-datepicker-wrapper\":\"TransactionsSearchTools_react-datepicker-wrapper__J50Bl\",\"filterContainer\":\"TransactionsSearchTools_filterContainer__oF5ZW\",\"iconSearch\":\"TransactionsSearchTools_iconSearch__RJ6M+\",\"iconDate\":\"TransactionsSearchTools_iconDate__NhUU6\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { format } from 'date-fns';\nimport { changeDate, changeFilter, resetFilter, selectDate, selectFilter } from '../../redux/Filter/FilterSlice';\nimport { Icon } from '../Icon/Icon';\nimport { UniversalButton } from '../UniversalButton/UniversalButton';\nimport s from './TransactionsSearchTools.module.css';\n\nexport const TransactionsSearchTools = ({ handleOpenModal, type }) => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const changeFilterValue = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  useEffect(() => {\n    dispatch(resetFilter());\n  }, [type, dispatch]);\n\n  const date = useSelector(selectDate);\n  const changeDateValue = e => {\n    if (!e) {\n      dispatch(changeDate(format(new Date(), 'yyyy-MM-dd')));\n      return;\n    }\n    dispatch(changeDate(format(e, 'yyyy-MM-dd')));\n  };\n\n  const handleResetFilter = () => {\n    dispatch(resetFilter());\n  };\n\n  return (\n    <div className={s.formContainer}>\n      <form action=\"\" className={s.formBox}>\n        <div className={s.filterContainer}>\n          <input\n            value={filter}\n            onChange={changeFilterValue}\n            type=\"text\"\n            className={s.formInput}\n            placeholder=\"Search for anything..\"\n          />\n          <Icon name=\"search\" className={s.iconSearch} size=\"20\" />\n        </div>\n\n        <div className={s.datepickerContainer}>\n          <DatePicker\n            className={s.formCalendar}\n            selected={date}\n            onChange={changeDateValue}\n            showPopperArrow={false}\n            maxDate={new Date()}\n            placeholderText=\"dd/mm/yyyy\"\n          />\n          <Icon name=\"calendar\" className={s.iconDate} size=\"20\" />\n        </div>\n        <UniversalButton action={handleResetFilter} type=\"reset\" />\n        <UniversalButton className={s.addBtn} action={handleOpenModal} />\n      </form>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TransactionsHistory_container__yz97E\",\"historyTitle\":\"TransactionsHistory_historyTitle__dZMeU\",\"historyText\":\"TransactionsHistory_historyText__ECljE\",\"textContainer\":\"TransactionsHistory_textContainer__YuU5U\",\"historyAmount\":\"TransactionsHistory_historyAmount__IEoNU\"};","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { TransactionsList } from '../components/TransactionsList/TransactionsList';\nimport { TransactionsSearchTools } from '../components/TransactionsSearchTools/TransactionsSearchTools';\nimport { Modal } from '../components/Modal/Modal';\nimport { TransactionForm } from '../components/TransactionForm/TransactionForm';\nimport { TransactionsTotal } from '../components/TransactionsTotal/TransactionsTotal';\nimport { selectTotalTransExpenses, selectTotalTransIncomes} from '../redux/Transaction/TransactionSlice';\nimport { addTransaction, getTransactions } from '../redux/Transaction/operations';\nimport { resetFilter, selectDate } from '../redux/Filter/FilterSlice';\nimport { useModal } from '../hooks';\nimport { fetchCurrentUser } from '../redux/User/operations';\nimport s from './TransactionsHistory.module.css';\n\nconst TransactionsHistory = () => {\n  const { transactionsType } = useParams();\n  const totalExpenses = useSelector(selectTotalTransExpenses);\n  const totalIncomes = useSelector(selectTotalTransIncomes);\n\n  const onSubmitForm = transaction => {\n    dispatch(addTransaction(transaction))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toggleIsAddModal();\n        toast.success('Transaction added successfully!');\n        dispatch(resetFilter());\n      })\n      .catch(error => {\n        toast.error('Something went wrong!');\n      });\n  };\n\n  const dispatch = useDispatch();\n  const filterDate = useSelector(selectDate);\n\n  // let text = 'All Expense';\n  // let description =\n  //   'View and manage every transaction seamlessly! Your entire financial landscape, all in one place.';\n  // if (transactionsType === 'incomes') {\n  //   text = 'All incomes';\n  //   description =\n  //     'Track and celebrate every bit of earnings effortlessly! Gain insights into your total revenue in a snap.';\n  // }\n\n  useEffect(() => {\n    if (filterDate) {\n      dispatch(getTransactions({ type: transactionsType, date: filterDate }));\n    } else {\n      dispatch(getTransactions({ type: transactionsType }));\n    }\n  }, [filterDate, dispatch, transactionsType]);\n\n  const [isAddModal, toggleIsAddModal] = useModal();\n\n  return (\n    <div className={s.container}>\n      <div className={s.textContainer}>\n        <h2 className={s.historyTitle}>text</h2>\n        <p className={s.historyText}>description</p>\n      </div>\n      <div className={s.historyAmount}>\n        <TransactionsTotal\n          totalAllExpenses={totalExpenses}\n          totalAllIncomes={totalIncomes}\n        />\n      </div>\n      <TransactionsSearchTools\n        handleOpenModal={toggleIsAddModal}\n        type={transactionsType}\n      />\n      <TransactionsList />\n      {isAddModal && (\n        <Modal toggleModal={toggleIsAddModal}>\n          <TransactionForm\n            onSubmitForm={onSubmitForm}\n            transactionsType={transactionsType}\n            history={transactionsType}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default TransactionsHistory;"],"names":["Shorter","str","windowSize","word","length","slice","ShorterDate","TransactionsItem","_ref","item","handleOpenModal","setWindowSize","useState","window","innerWidth","transactionsType","useParams","useEffect","handleWindowResize","addEventListener","removeEventListener","dispatch","useDispatch","currency","useSelector","selectCurrency","_jsxs","className","s","children","_jsx","category","categoryName","comment","dateString","dateObj","Date","dayOfWeek","getDay","day","getDate","month","getMonth","year","getFullYear","substring","toString","padStart","convertDate","date","time","sum","toUpperCase","onClick","Icon","name","size","handleDeleteTransaction","id","_id","deleteTransaction","unwrap","then","fetchCurrentUser","getTransactions","type","toast","catch","error","TransactionsMessage","message","TransactionsList","transactions","selectTransactions","isOpenEditTransaction","toggleEditTransaction","useModal","filter","selectFilter","filterItems","toLowerCase","includes","currentItem","setCurrentItem","map","Modal","toggleModal","TransactionForm","transaction","onSubmitForm","editTransaction","TransactionsSearchTools","resetFilter","selectDate","action","value","onChange","e","changeFilter","target","placeholder","DatePicker","selected","changeDate","format","showPopperArrow","maxDate","placeholderText","UniversalButton","handleResetFilter","TransactionsHistory","totalExpenses","selectTotalTransExpenses","totalIncomes","selectTotalTransIncomes","filterDate","isAddModal","toggleIsAddModal","TransactionsTotal","totalAllExpenses","totalAllIncomes","addTransaction","history"],"sourceRoot":""}